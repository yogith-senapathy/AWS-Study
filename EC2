

Basics:

. EC2 is Elastic Compute Cloud
. Service that provides resizable compute capacity
. Able to genarate VM's (linux,windows) in minutes

EC2 Pricing Options :
---------------------
   a) On Demand : pay as per usage (hours/seconds) , no commitments
                  currently linux as per seconds, windows as per hours
                    - applications which are in development and testing and studying
                    - applications with short term loads
  
   b) Reserved : 1 or 3 year contract with amazon
                 provides capacity reservation and less charges than On Demand
                   - applications with setady/predictable usage
                   - applications that require reserved capacity
                   - Three types of reserved Instances:
                      . Standard : 75% off of On-demand
                      . Convertible : Reserved instances which can convert their capacity and memory usage
                      . Scheduled : Reserved instances required for a scheduled time period.

   c) Spot : Bid for price of instance capacity
             better savings if applications have flexible start and end times
             ** If a spot instance is terminated by Amazon, we will not be charged for that partial hour.
                we will be charged for spot instance if we terminate it by oursleves.

   d) Dedicated Hosts : Physical ec2 machines dedicated for our application
                        reduces costs, can install server software licenses
                        suitable for oracle, databases etc
                        useful for licensing requirements which doesn't support multi-tenancy/cloud deployments
                        can be purchased On-Demand (hourlY)
                        can be purchased as Reserved ( 70% off of On-Demand)

EC2 Instance Types:
-------------------

1) General : T , M
2) Storage : H , I , D
3) Compute : C
4) Memory  : X, R, Z
5) Accelerated Computing : G, P, F

Instance Type    Features                                     Use cases

F                 Accelerated Computing                       Video processing, Reasearch and Analytics

I3                Storage Purpose, High IOPS
                  Bare metal workloads                        No SQL databases, data warehousing and elastic search

G                 Accelerated Computing, Graphics             3D etc

H1                Storage Purpose, 16 TB of HDD               NFS, Apache Kafka, Big Data
                  high disk throughput

T2                Low Cost, general purpose                   web sites, web applications, test and dev environments, code repo's and build servers

D2                Storage Purpose, 48 TB of HDD
                  high disk throughput                        NFS, Mapreduce, Hadoop

R                 Memory Purpose                              DataBases, Big Data, Hadoop clusters

M
M5,M4             General Purpose, balance compute & n/w      small databases, cache, sharepoint, cluster computing

C                 Computing Purpose,high perform @low price   Databases, video encoding, multi player games
C5,C4             Require VPC

P                 Accelerated Computing                        Machine learning, Recognitions

X                 Memory Purpose, offers lowest price per gb   Databases, HANA, SAP
X1e, X1

Z                 Memory Purpose


How to Remember EC2 types: (" Fight Dr MCPX")

F
I
G
H
T
D
R
M
C
P
X
z

EBS ( Elastic Block Storage ):
------------------------------
.It is a block based storage
.Creates storage volumes and attach it to EC2 instances
.Can run databases, save files, use as a blcok device
.EBS volumes are stored in AZ, so if EBS volume gets lost/fails in ec2 it can still be restored from AZ.
.Root Volume : Volume attached to root of a machine.(like C drive)
. EBS Volume Types:
  1) SSD:

     a) General Purpose SSD (GP2):
        - General usage, balances performance and price
        - Ratio of 3 IOPS per GB with up to 10,000 IOPS per volume
        - can burst to 3000 IOPS for long times and for volumes of 334GB

     b) Provisioned IOPS SSD (IO1):
        - Useful for intense and extreme usage applications
        - Use for more than 10,000 IOPS
        - can provision upto 20,000 IOPS per volume

  2) Magnetic:

     c) Throughput Optimized HDD (ST1):
        - useful for Bigdata, Data warehouses, Log processing
        - ***** It is not a block storage  ( i.e means it cannot be used as root volume)

     d) Cold HDD (SC1):
        - low cost and useful for infrequent access
        - file server
        - ***** It is not a block storage  ( i.e means it cannot be used as root volume)

     e) Magnetic (Standard):
        - very old
        - cheapest of all volumes
        - ** Bootable
        - used for less workloads enviornment


. ****** If we delete an instance, EBS volume attached to that instance will also gets deleted by default. It can be turned off. 
. ** We can attach multiple volumes , EBS to an instance.
. *** We cannot encrypt root volume by default but we can encrypt other attached volumes in an instance.
    - we can encrypt root volume in one way, create AMI out of current instance and encrypt over there or use third party tools. But we cannot encrypt during initial creation.
. ******* Both EBS volumes and EC2 instance to which it is attached should be in same Availability Zone.
. We can change root volume size and type (EB2/IO1/Magnetic) even after creating instance. But remember we cannot delete it from ui of aws.
. We cannot change volume size of magnetic after it is attached to instance.
. To use same volume ( volume being assigned to an instance) in another Availability zone :
   - create a snapshot of volume
   - create a volume from snapshot ( we can choose other EBS types and AZ while creating volume)
  AWS Question: to create a same volume in another AZ, then create a snapshot of it and use it to create volume in another AZ.
  AWS Question: to copy an ec2 from one region to another : create a snapshot, copy snapshot to another region, create image and then trigger ec2
                                                            create AMI , use AMI to create new instance on different AZ.


Snapshots : 
   - Snapshots reside in S3
   - Snapshots are copy of volumes at one point
   - Snapshots are incremental : if a change is made to volume which already has a snapshot and then we copy volume then it will be just a latest change copied to original snapshot stored in S3.
   - Snapshots of encrypted volumes are encrypted automatically
   - ***** We can't delete a snapshot of the root device of an EBS volume used by a registered AMI. You must first deregister the AMI before you can delete the snapshot.


RAID, Volumes and Snapshots:
----------------------------

RAID : Redundant Array of Independnet Disks
       - collection of multiple disks and assign it as a single volume to instance.
       - Different types of RAID's:
             - RAID 0 : Striped, Good Performance, No Redundency
             - RAID 1 : Mirrored, Redundency
             - RAID 5: Good for Reads, Bad for Writes. AWS don't recommened to use this.
             - RAID 10 : RAID 0 + RAID 1 = Good performance, Redundency, Stripped and Mirriored.
       - Use case : If a server say Cassandra is not supported in one EBS volume, then we can use RAID to boost performance.

Snapshot of RAID array can be done by:
. Shutdown ec2 instance and take snapshot (or)
. Freeze RAID and take snapshot (or)
. Unmount RAID array

EBS vs Instance Store:
----------------------
. Instance store is ephemeral storage.
. ** We can launch instances using instance storage and attach an extra instance storage during creation. But we cannot attach additional instance storage after creation.
  Any ways we can attach additional EBS volumes to instance stored ec2.
. ***** In instance store we cannot stop an instance.
. ***** In instance stored ec2 if ec2 fails then all data lost but in EBS ec2 if ec2 stops we don't loose data.
. All AMI's either have EBS/ Instance stored
. In instance stored volumes, root volume is created from a template in S3.


Launching Instances:
--------------------
. we create a secret key pair at the end of creating instance. This generates public and private key which are required for connecting to instance.
. Security is configured where we define policies like ssh/http/https/ etc rules
. ssh ec2-user@IPADDRESS -i .pem
. ** Status Checks : Check available to ec2 instance :
   - System Status Check : check if instance is reachable or not. Check if aws can get network pacgaes or not
   - Instance Status Check : check if operating system is accepyting traffic or not. If not reboot vm.
.** Termination Protection - protection to stop terminating an instance. It is disabled by default.
. For windows users pem file has to be converted to ppk for connection.



Security Groups:
----------------
. It is a virtual firewall to instance
. This is where we set ssh/http/https/ etc rules to instances. There re two types of rules :
   - inbound : In traffic : denied by default
   - outbound : out traffic : allowed by default
. **** Any rule made to securoty group will applied immediately.
. **** Security groups are "statefull" - rules added to inbound automatically replicated to outbound
        - NACL are "stateless"
. Every rule is blocked by defualt until we allow it.
. Default rules are same all over globe but custom rules should be created separately in each Region.
. *****We can attach multiple security groups to an instance.
. RDP port is 3389, MySQL port is 3306. 
. * We cannot block IP's using security groups, it is done using NACL.
. we cannot deny any rule, only accept rules.






AMI (Amazon Machine Images):
----------------------------

. These are snapshots of virtual images

. AMI's are regional. We can only launch an instance from AMI only from the region it is available.


Elastic Load Balancers:
---------------
. Load Balancers are of three types:

   - Application Load Balancer:
          . suited for http and https; Layer 7; Intelligent; route traffic as per application
   - Network Load Balancer:
          . suited for tcp traffic, layer 4, Extreme Powerful, can handle millions of requests, static IP
   - Classic Load Balancer:
          . can route https/https traffic. Use layer 7 X-Forwarding and Sticky sessions
          . Can use layer 4 for TCp traffic.

. Load balance error : Error 504 -> When application has issues ELB responds with 504 error.

. X-Forwarded for header: ELB forwards users Public IP address (IPv4) to ec2 using X-forwareders.

. Response Time: time to wait for receiving a response from health check.

. Timeout : amount of time between health checks

. In Load Balancer we get DNS names

. In load balancer we can add multiple ec2 instances ( that's the concept)

. Load Balancer differentiate servers as Inservice or Outofservice.

. ** Elastci Load Balancer (ELB) will only have a DNS name and no IP address. As they don't have IP address, they are supposed to use either CName or Alias Record for Route 53.

. ** AWS charges for using CName and NO charge for Alias Record.

. ** For ELB choose the same region where EC2 instances are created. ELB only shows instances which are created in same region.

. **** Your load balancer routes requests to the targets in this target group using the protocol and port that you specify, and performs health checks on the targets using these health check settings. Note that each target group can be associated with only one load balancer.

*** READ FAQ


CloudWatch  for Ec2:
--------------------

. **** What metrics are available by default for ec2 in cloudwatch:
    - CPU Utilization
    - Disk Utilization
    - Network Utilization
    - Status checks

. Basic monitoring : 5 minutes , Detailed monitoring : 1 minute

. Activities done in cloudwatch : Create Dashboard, create billing alarm , create events

. Cloudwatch Events : Useful to trigger an aws resource based on event. We configure an event and when that event occurs we can tell what should happen
                      ( example : if I upload an object to S3, I can ask to run some lambda code )

. Cloudwatch Logs : Provide detailed logs of ec2 instance upto application level. We install a small software in ec2 and that software will provide details to cloudwatch log.

. ******  Cloudwatch is for Logging data.
          Cloudtrial is for Auditing data.



BootStrap Scipts and Metadata:
------------------------------

. ** BootStrap Scripts: Scripts (bash) which we can provide to ec2 instance during creation. EC2 will be created with details provided in bash script.

. ******* Data from ec2 instances:
    Meta-data: To find metadata of an instance do :
    User-data :curl http://169.254.169.254/latest/meta-data
    Dynamic-data : http://169.254.169.254/latest/dynamic/  instance identity document that is generated when the instance is launched

. To get user provided data :  curl http://169.254.169.254/latest/user-data


Launch Configurations and Auto Scaling:
---------------------------------------

. Before we create Auto Scaling group we create Launch Configurations.

. Good practice to assign multiple subnets (AZ's) to Auto Scaling because if one fails others support.

. If we delete the auto scaling group, it will automatically delete all the ec2 instances launched by it.


**** EC2 Placement Groups:
--------------------------

. There are two types of Placement groups:

    - Clustered Placement Groups :  Grouping on instaces in ONE AVAILABILTY ZONE (AZ)
                                    Low latency,high throughput and for both. Example: Big data, cassandra
                                    only certain instances can be launched by in this placement group.

    - Spread Placement Groups : Grouping of instance in distinct underlying hardwares. instances should be in different AZ's.
                                recommended for critical applications.

. ** The name specified to placement groups must be unique with our AWS account.

. AWS recommended homogeneious instances in a placement group.

. We can't merge placement groups.

. We can't import existing ec2 instance into a placement group. To do that create AMI , launch new instance based on that AMI in placement group.


Elastic File System (EFS):
--------------------------

. It is one of the file storage service to EC2 instances and it is block based storage type.

. Simple UI and easy to create.

. In EFS storage is elastic, growth and shrink of size takes places as we add/remove files in storage. So application gets size when it requires.

. Features:
   - Supports NFS version 4 and can held multiple concurrent NFS connections. EFS can be used on multiple EC2 instances at same point of time.
   - pay for what you use.
   - can scale upto petabytes.
   - ** Data is stored across multiple AZ's , so high durability
   - Read after write consistency

. We can apply access levels to folders in EFS and it will be universal.



Lambda:
-------

. Lambda is serverless.

. One lambda function can trigger another lambda function.

. Lambda supports C, GO, Java, NodeJS, Python.

. ************* Memorize all triggers by lambda Lambda Triggers are : 

        Alexa, Dynamo DB, SNS, SQS, S3, IOT, API Gateway, Cloudfront, cloudwatch (events and logs), Code Commit, cognito sync trigger, Kinesis

. **** A single request invokes a lambda function. Multiple requests invokes multiple lambda functions.

. Lambda is very cheap. Costs are based on 
                                 - Requests: Free for 1 million and then $ 0.20 per million
                                 - Duration : Code Run time.

. The maximun threshold for a function to execute is 5 minutes.


Notes:
------

. ****1 subnet = 1 Availability Zone ( i.e 1 az has only 1 subnet )

. ****** If we delete an instance, EBS volume attached to that instance will also gets deleted.

. *** Ephemeral Storage : Any storage made out of EBS volume in an instance. This data will be lost if we stop the instance.

. ** It is possible to attach IAM roles to running instances.

. ** API GATEWAY CORS

. ******* serverless options by AWS:
   - Lambda : computing
   - API Gateway : API Proxy
   - S3 : Storage
   - Dynamo DB : Database
   - APP Sync : Database
   - SNS : Messaging
   - SQS : Messaging
   - Kinesis : Analytics
   - Athena : Analytics
   - Step Function : Orchestration
   - Developer Tools
