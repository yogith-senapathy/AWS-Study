
SQS Simple Queue Service:
-------------------------
. SQS is a service which helps to store messages in a queue until a computer process them.
. SQS helps queue messages one service can use it and can triiger another service.

. ****** SQS is a pull based system.
. ****** SNS is a push based system

. SQS is a pull based system , that means different AWS pull data from SQS. SQS doesn't push any messages to any service.
. Message can consists of 256KB of data in any format.
. SQS can configured/backedup by auto scalling which can monitor queue. If queue increases increase ec2 count and decrease ec2 count if queue decreases. Thus improving performance of app.
. There are two types of queues:

    - Standard Queues:
              . Default Queue type
              . supports unlimited transactions per second
              . usually delivers messages in the order they have received, but not guaranteed.


    - FIFO (First IN First OUT): 
              . Guatantees delivery of messages in the order they have received.
              . Duplicates are not introduced.
              . Handles 300 messages per second.

. SQS Visibility Timeout:
         . It is the amount of time a message will be invisible in a queue after it is processed.
         . If a job is processed within that visibility time then message gets deleted else new duplicate message will be added into queue.
       **. Default is 30 seconds and max is 12 hrs.

. SQS Long Polling: long polling doesn't return a response until a queue is available. Cheaper cost

. SQS Short Polling : polls SQS frequently for any messages, higher costs.

SQS Notes:
----------
. It is pull based
. supports data size of upto 256KB
. can store data in queue from 1 minutes to 30 days , with default retention as 14 days
. SQS gurantees delivery of messages atleast once.
. *** SQS messages can be encrypted using SSE. We cannot encrypt SQS metadata, message metadata (like timestamp)
. * SQS doesn't delete any messages, consumers (ec2/lambda) should delete these messages after processing.
. SQS supports "Dead Letter Queue" , which are useful for debugging application.
  - The dead-letter queue of a FIFO queue must also be a FIFO queue. 
  - Similarly, the dead-letter queue of a standard queue must also be a standard queue.



SWF Simple Workflow Service:
----------------------------
. SWF is a service which allows coordinating of work across distributed components
. SWF Tasks indicate execution of steps like scripts execution, human actions, decision making
. SWF Workers are programms that interact with SWF to get tasks, process received tasks and results.
. SWF Decider is a programm that controls the coordination of Tasks
. SWF ensures tasks executed only once and no duplicates
. SWF maintains app state so tasks, deciders don't need to mainatin their states.
. SWF Domain can isolate Tasks, Workers and their execution
. SWF is json format data
. SWF workflow can be for 1 year and time will be measured in seconds.
. SWF Actors are : Workflow starters, Deciders and Activity workers.

SWF                            SQS
Task oriented                  Message oriented
no duplication of tasks	       messages in queue can be duplicated
keep tracks of tasks           manually set tracking by using various resources.


SNS Simple Notification Service:
--------------------------------
. It is a push based messaging system.
. We create topics in SNS and subscribe to those topics
. SNS is pub-sub (or) fan-out model.
. Subscriptions can be http, https, SQS, Lambda, SMS and Email.
. We can have multiple subscriptions to a topic.
. When a topic is created a ARN is created.
. We can assign "Filter Policies" to a topic, so that subsribers get only messages which are filtered.


Elastic Transcoder:
-------------------

. It is amedia transcoder in cloud, which helps converts media types from one format to another. Like .mp4 to some other
. Provides suggestions on what format best suits for what purpose.
. Pay for minutes to transcode and resolution of content.


API Gateway:
------------
. It is an API service used to publish, monitor and scale secure API's.
. It acts as front door to receive API calls from user and trigger back end applications like ec2/lambda
. *** API Caching: Enables to cache data from end point into API GAteway for TTL. Increase users performance.
. We can thortole requests to prevent malicious attacks.
. Same origin Policy: It is apolicy in webservers which allow access to second page of webserver if that call is made as same DNS that is made on irst page.
. CORS (Cross Origin REsource Sharing) is a process where we can set relax to smae origin policy.
. When we see error like "Origin Policy cannot be read at remote resource" then we need to enable CORS at API gateway.
. ** All API's created using API Gateway are "https" endpoints only. API Gateway supports only https endpoints and doesn't support 'http'
. Have "Resources": Which are part of API Domains
      - "Methods" : GET, PUT, POST etc .. supports "ANY" method as well
      - "Stage" : Stages are similar to tags, where we define API accessible path
. Prevent DDOS attack


Kinesis:
--------
. Streaming Data: Data generated by thousand of resources and send small amounts of data in KB's.

. Kinesis is a service in AWS where we can send streaming data for analyzing.

. Kinesis services are of 3 types:

      - Kinesis Streams:

           Data Producers send data --> Kinesis Streams which consists of Shards --> COnsumers (ec2/lambda) gets data and analyze --> analyzed data sent to storage devices
                                              shards have retention period of 24hrs - 7 days
      - Kinesis Firehose:

           Data Producers send data --> Kinesis Firehose (firehose has all automation to analyze data) --> analyzed data sent to storage devices (s3, redshift, elastic search and splunk)
                                                           no need of shards and consumers, lambda takes care
              
      - Kinesis Analytics:
            Analytics allows to run SQL queries for data stored in Kinesis Streams and Kinesis Firehose. Store that data in S3 and others.
            
      - Shards cannot guarantee the order of data, if it is being processed by multiple shards. order is possible only within a shard.
      - Initial count of shards can be calculated using Incoming Write and Outgoing Read bandwidth.

SES:
----
. It is an email service from AWS.
. Can receive emails and store in S3.
. SES can trigger Lambda functions.
